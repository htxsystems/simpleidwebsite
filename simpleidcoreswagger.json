{
  "swagger": "2.0",
  "info": {
    "description": "This is the API definition of SimpleID Core, the multibiometric solution from HTX Systems",
    "version": "2.0.0",
    "title": "SimpleID Core API ",
    "x-logo": {
      "url": "../Content/images/logo-htx.png",
      "backgroundColor": "#FFFFFF",
      "altText": "HTX Systems Logo"
    }
  },
  "host": "YOUR-DOMAIN.COM",
  "tags": [
    {
      "name": "SimpleID",
      "description": "SimpleID Core API"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/simpleid/analyze": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Analyzes a face image",
        "description": "This method is responsible for processing an image and returning information about the bigger face (if any) found. This method can be used to perform quality check",
        "operationId": "analyze",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Face to be processed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyzeImageModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/FaceAnalysisResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/register": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Registers a new person",
        "description": "This method is responsible for registering a new person. If the supplied PersonID already exists, an UPDATE operation will be performed. It guarantees that only one face is registered per account. This means that the same person (face) cannot be registered on the same account under two different IDs",
        "operationId": "register",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Information of the person to be inserted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDCoreAPIResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/searchface": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Searches a face",
        "description": "This method performs a biometric (facial) search against registered persons. If PersonID is supplied, a VERIFICATION (1:1) operation is performed, otherwise a IDENTIFICATION (1:N) is performed. ",
        "operationId": "searchface",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the search operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaceSearchPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDCoreAPIResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/searchfingerprint": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Searches a fingerprint",
        "description": "This method performs a biometric (fingerprint) search against registered persons. If PersonID is supplied, a VERIFICATION (1:1) operation is performed, otherwise a IDENTIFICATION (1:N) is performed. ",
        "operationId": "searchfingerprint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the search operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FingerSearchPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDCoreAPIResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/delete": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Deletes a person from the system",
        "description": "",
        "operationId": "delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the delete operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDCoreAPIResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/person": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Returns a person information with its face image",
        "description": "",
        "operationId": "person",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDCoreAPIResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "name": "ApiKey",
      "description": "The ApiKey should be supplied in request Authorization header. Ex: Authorization: ApiKey YOUR_API_KEY",
      "in": "header"
    }
  },
  "definitions": {
    "AnalyzeImageModel": {
      "type": "object",
      "properties": {
        "Face": {
          "$ref": "#/definitions/FaceRequest"
        }
      }
    },
    "RegisterPersonModel": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "ID of the account that will store this person. If null, a default 'htx' account will be used"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique ID of the person. If null, the system will generate a GUID to be used as unique ID. If the supplied ID already exists, an UPDATE operation will be executed"
        },
        "CustomField1": {
          "type": "string",
          "description": "Custom information that is used by the application"
        },
        "CustomField2": {
          "type": "string",
          "description": "Custom information that is used by the application"
        },
        "CustomField3": {
          "type": "string",
          "description": "Custom information that is used by the application"
        },
        "Fingers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FingerRequest"
          }
        },
        "Faces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FaceRequest"
          }
        },
        "IgnoreSearch": {
          "type": "boolean",
          "description": "If SimpleID is configured to perform duplication check during registration, passing True on this field will force SimpleID to ignore any duplicated registers"
        }
      }
    },

    "FaceSearchPersonModel": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "ID of the account on which the search operation will be performed. If null, a default 'htx' account will be used"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique ID of the person. If null, the whole database will be searched (1:N), otherwise a 1:1 operation will be performed"
        },
        "Face": {
          "$ref": "#/definitions/FaceRequest"
        }
      }
    },
    "FaceRequest": {
      "type": "object",
      "properties": {
        "Image": {
          "$ref": "#/definitions/FaceImage"
        }
      }
    },
    "FaceImage": {
      "type": "object",
      "properties": {
        "Format": {
          "type": "integer",
          "description": "Image format. 0 for Unknown, 1 for JPEG, 2 for JPEG2K and 3 for BMP. JPEG2K IS NOT SUPPORTED IN THE CURRENT VERSION OF THE API"
        },
        "Type": {
          "type": "integer",
          "description": "Type of picture that was taken. 0 for Unknown, 1 for FRONTAL, 2 for ANGLED. THIS FIELD IS NOT USED IN THE CURRENT VERSION OF THE API"
        },
        "Data": {
          "type": "string",
          "description": "Face image in Base64 format"
        }
      }
    },

    "FingerSearchPersonModel": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "ID of the account on which the search operation will be performed. If null, a default 'htx' account will be used"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique ID of the person. If null, the whole database will be searched (1:N), otherwise a 1:1 operation will be performed"
        },
        "Finger": {
          "$ref": "#/definitions/FingerRequest"
        }
      }
    },
    "FingerRequest": {
      "type": "object",
      "properties": {
        "Position": {
          "type": "integer",
          "description": "Finger position. 0 for Unknown, 1 for Right Thumb, 2 for Right Index ... 5 for Right Little, 6 for Left Thumb and so on"
        },
        "Exception": {
          "type": "integer",
          "description": "Reason a finger was not captured. 0 for None, 1 for AMPUTADED, 2 for SCAR, 3 for UNAVAILABLE, 4 for BAD_FINGER"
        },
        "Template": {
          "$ref": "#/definitions/FingerprintTemplate"
        },
        "Images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FingerprintImage"
          }
        }
      }
    },
    "FingerprintTemplate": {
      "type": "object",
      "properties": {
        "Format": {
          "type": "integer",
          "description": "Template format. 0 for Unknown, 1 for ISO 19794-2, 2 ANSI/378"
        },
        "Data": {
          "type": "string",
          "description": "Fingerprint template in Base64 format"
        }
      }
    },
    "FingerprintImage": {
      "type": "object",
      "properties": {
        "Format": {
          "type": "integer",
          "description": "Template format. 0 for Unknown, 1 for WSQ, 2 ISO 19794-4, 3 for Bitmap"
        },
        "Type": {
          "type": "integer",
          "description": "Fingerprint image capture type. Not used on the current version of the API"
        },
        "NFIQ": {
          "type": "integer",
          "description": "NFIQ of this image. 0 for Unknown, from 1 (Very Good) to 5 (Poor)"
        },
        "DPI": {
          "type": "integer",
          "description": "Image resolution in DPI. This field is ignored and only 500DPI images are accepted"
        },
        "Data": {
          "type": "string",
          "description": "Fingerprint image in Base64 format"
        }
      }
    },



    "DeletePersonModel": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "ID of the account on which the delete operation will be performed"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique ID of the person to be deleted."
        }
      }
    },
    "GetPersonModel": {
      "type": "object",
      "properties": {
        "AccountID": {
          "type": "string",
          "description": "ID of the account on which the operation will be performed"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique ID of the person to be returned."
        },
        "CustomField1": {
          "type": "string",
          "description": "Custom information that is used by the application"
        }
      }
    },



    "SimpleIDCoreAPIResponse": {
      "type": "object",
      "properties": {
        "TransactionInformation": {
          "$ref": "#/definitions/TransactionInformation"
        }
      }
    },
    "TransactionInformation": {
      "type": "object",
      "properties": {
        "ReturnCode": {
          "type": "integer",
          "description": "Return code"
        },
        "Message": {
          "type": "string",
          "description": "Message describing the return code"
        },
        "TransactionID": {
          "type": "string",
          "description": "ID of the transaction generated by the systems"
        },
        "AccountID": {
          "type": "string",
          "description": "Account on which the operation was performed"
        },
        "Persons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Person"
          }
        }
      }
    },
    "Person": {
      "type": "object",
      "properties": {
        "PersonID": {
          "type": "string",
          "description": "Unique ID of the person"
        },
        "CustomField1": {
          "type": "string",
          "description": "Custom information that is used by the application"
        },
        "CustomField2": {
          "type": "string",
          "description": "Custom information that is used by the application"
        },
        "CustomField3": {
          "type": "string",
          "description": "Custom information that is used by the application"
        },
        "Fingers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FingerRequest"
          }
        },
        "Faces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FaceRequest"
          }
        }
      }
    },
    "FaceAnalysisResponse": {
      "type": "object",
      "properties": {
        "ReturnCode": {
          "type": "integer",
          "description": "Return code"

        },
        "Message": {
          "type": "string",
          "description": "Message describing the return code"
        },
        "Analysis": {
          "$ref": "#/definitions/FaceImageAnalysis"
        }
      }
    },
    "FaceImageAnalysis": {
      "type": "object",
      "properties": {
        "Yaw": {
          "type": "integer",
          "description": "Head pose yaw angle"
        },
        "Pitch": {
          "type": "integer",
          "description": "Head pose pitch angle"
        },
        "Roll": {
          "type": "integer",
          "description": "Head pose roll angle"
        },
        "Brightness": {
          "type": "integer",
          "description": "Brightness level. -1 for Too Dark, 0 for Good and 1 for Too Bright"
        },
        "Sharpness": {
          "type": "boolean",
          "description": "Indicates whether the sharpness level is good or not"
        },
        "MouthClosed": {
          "type": "boolean",
          "description": "Indicates if the mouth is closed"
        },
        "Rectangle": {
          "description": "Location of the bigger face (if any)",
          "$ref": "#/definitions/Rectangle"
        },
        "CropRectangle": {
          "description": "Rectangle indicating the crop region according to ISO 19794-5 format Full Frontal",
          "$ref": "#/definitions/Rectangle"
        },
        "LeftEye": {
          "description": "Left eye information",
          "$ref": "#/definitions/Eye"
        },
        "RightEye": {
          "description": "Right eye information",
          "$ref": "#/definitions/Eye"
        }
      }
    },
    "Rectangle": {
      "type": "object",
      "properties": {
        "X": {
          "type": "integer",
          "description": "Top left X coordinate"
        },
        "Y": {
          "type": "integer",
          "description": "Top left Y coordinate"
        },
        "Width": {
          "type": "integer",
          "description": "Width"
        },
        "Height": {
          "type": "integer",
          "description": "Height"
        }
      }
    },
    "Eye": {
      "type": "object",
      "properties": {
        "X": {
          "type": "integer",
          "description": "Eye position X coordinate"
        },
        "Y": {
          "type": "integer",
          "description": "Eye position Y coordinate"
        },
        "Open": {
          "type": "boolean",
          "description": "Indicates wheter the eye is open or not"
        }
      }
    }
  }
}