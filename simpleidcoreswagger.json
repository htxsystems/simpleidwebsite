{
  "swagger": "2.0",
  "info": {
    "description": "This is the API definition of SimpleID Core, the facial recognition solution from SimpleID",
    "version": "1.0.0",
    "title": "SimpleID Core API ",
    "x-logo": {
      "url": "../Content/images/logo-htx.png",
      "backgroundColor": "#FFFFFF",
      "altText": "HTX Systems Logo"
    }
  },
  "host": "demo.simpleid.com.br",
  "tags": [
    {
      "name": "SimpleID",
      "description": "SimpleID Core API"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/simpleid/register": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Registers a new person",
        "description": "This method is responsible for registering a new person. If the supplied PersonID already exists, an UPDATE operation will be performed.",
        "operationId": "register",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "clientcode",
			"type" : "string",
            "description": "Client code. This code if supplied by SimpleID. Ex: clientcode YOUR_CLIENT_CODE",
            "required": true,
            
		},
		{
            "in": "header",
            "name": "accountcode",
			"type" : "string",
             "description": "Account code. Each account is considered a tenant inside the API. If your application is going to be deployed to different clients that don't share a common database, you can use this field to separate them. Ex: accountcode YOUR_ACCOUNT_CODE",
            "required": true,
            
		},
		  {
            "in": "body",
            "name": "body",
            "description": "Information of the person to be inserted/updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDAPIRegisterResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/search": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Searches a face",
        "description": "This method performs a biometric (facial) search against registered persons. If PersonID is supplied, a VERIFICATION (1:1) operation is performed, otherwise a IDENTIFICATION (1:N) is performed. In current version only 1:1 operation is guaranteed to work. ",
        "operationId": "searchface",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
		 {
            "in": "header",
            "name": "clientcode",
			"type" : "string",
            "description": "Client code. This code if supplied by SimpleID. Ex: clientcode YOUR_CLIENT_CODE",
            "required": true,
            
		},
		{
            "in": "header",
            "name": "accountcode",
			"type" : "string",
             "description": "Account code. Each account is considered a tenant inside the API. If your application is going to be deployed to different clients that don't share a common database, you can use this field to separate them. Ex: accountcode YOUR_ACCOUNT_CODE",
            "required": true,
            
		},
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the search operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FaceSearchPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDAPISearchResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/delete": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Deletes a person from the system",
        "description": "",
        "operationId": "delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
		 {
            "in": "header",
            "name": "clientcode",
			"type" : "string",
            "description": "Client code. This code if supplied by SimpleID. Ex: clientcode YOUR_CLIENT_CODE",
            "required": true,
            
		},
		{
            "in": "header",
            "name": "accountcode",
			"type" : "string",
             "description": "Account code. Each account is considered a tenant inside the API. If your application is going to be deployed to different clients that don't share a common database, you can use this field to separate them. Ex: accountcode YOUR_ACCOUNT_CODE",
            "required": true,
            
		},
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the delete operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDAPIDeleteResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/simpleid/person": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Returns a person information with its face image",
        "description": "",
        "operationId": "person",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
		 {
            "in": "header",
            "name": "clientcode",
			"type" : "string",
            "description": "Client code. This code if supplied by SimpleID. Ex: clientcode YOUR_CLIENT_CODE",
            "required": true,
            
		},
		{
            "in": "header",
            "name": "accountcode",
			"type" : "string",
             "description": "Account code. Each account is considered a tenant inside the API. If your application is going to be deployed to different clients that don't share a common database, you can use this field to separate them. Ex: accountcode YOUR_ACCOUNT_CODE",
            "required": true,
            
		},
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDAPIGetPersonResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
	"/simpleid/check": {
      "post": {
        "tags": [
          "SimpleID"
        ],
        "summary": "Checks if a PersonID is registered",
        "description": "",
        "operationId": "check",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
		 {
            "in": "header",
            "name": "clientcode",
			"type" : "string",
            "description": "Client code. This code if supplied by SimpleID. Ex: clientcode YOUR_CLIENT_CODE",
            "required": true,
            
		},
		{
            "in": "header",
            "name": "accountcode",
			"type" : "string",
             "description": "Account code. Each account is considered a tenant inside the API. If your application is going to be deployed to different clients that don't share a common database, you can use this field to separate them. Ex: accountcode YOUR_ACCOUNT_CODE",
            "required": true,
            
		},
          {
            "in": "body",
            "name": "body",
            "description": "Information used to perform the operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckIDPersonModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation executed successfully",
            "schema": {
              "$ref": "#/definitions/SimpleIDAPICheckIDResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "name": "apikey",
      "description": "The ApiKey should be supplied in request Authorization header. Ex: Authorization: apikey YOUR_API_KEY",
      "in": "header"
    }
  },
  "definitions": {
	"RegisterPersonModel": {
      "type": "object",
      "properties": {
		"Person": {
	
         "$ref": "#/definitions/PersonInformation",
          "description": "Information about the person to be registered. If no PersonID is supplied, the API will generate one"
        },
        "ServiceProvider": {
		 
         "$ref": "#/definitions/ServiceProvider",
		 "description": "Information about the service provider executing the operation."
        },
		"Transaction": {
		
         "$ref": "#/definitions/Transaction",
		 "description": "Information about the request."
        },
        "Faces": {
		 "type": "array",
          "items": {
            "$ref": "#/definitions/FaceRequest"
          }
        }
      }
    },

    "FaceSearchPersonModel": {
      "type": "object",
     "properties": {
		"Person": {
		
         "$ref": "#/definitions/PersonInformation",
          "description": "Information about the person to be removed. Supply PersonID if the search should be 1:1"
        },
        "ServiceProvider": {
		
         "$ref": "#/definitions/ServiceProvider",
		 "description": "Information about the service provider executing the operation."
        },
		"Transaction": {
		
         "$ref": "#/definitions/Transaction",
		 "description": "Information about the request."
        },
        "Face": {
          "$ref": "#/definitions/FaceRequest"
        }
      }
    },

    "DeletePersonModel": {
      "type": "object",
      "properties": {
        "Person": {
         "$ref": "#/definitions/PersonInformation",
          "description": "Information about the person to be removed. Only the PersonID is used by SimpleID"
        },
        "ServiceProvider": {
         "$ref": "#/definitions/ServiceProvider",
		 "description": "Information about the service provider executing the delete operation."
        },
		"Transaction": {
         "$ref": "#/definitions/Transaction",
		 "description": "Information about the request."
        }
      }
    },
    
	"GetPersonModel": {
      "type": "object",
      "properties": {
        "Person": {
         "$ref": "#/definitions/PersonInformation",
          "description": "Information about the person to be returned. Only the PersonID is used by SimpleID"
        },
      }
    },

	
	"CheckIDPersonModel": {
      "type": "object",
      "properties": {
	   
        "Person": {
         "$ref": "#/definitions/PersonInformation",
          "description": "Information about the person. Only the PersonID is used by SimpleID"
        }
      }
    },
	
	"FaceRequest": {
      "type": "object",
      "properties": {
        "Image": {
          "$ref": "#/definitions/FaceImage"
        }
      }
    },
    
	"FaceImage": {
      "type": "object",
      "properties": {
        "Format": {
          "type": "integer",
          "description": "Image format. 0 for Unknown, 1 for JPEG, 2 for JPEG2K and 3 for BMP. JPEG2K IS NOT SUPPORTED IN THE CURRENT VERSION OF THE API"
        },
        "Type": {
          "type": "integer",
          "description": "Type of picture that was taken. 0 for Unknown, 1 for FRONTAL, 2 for ANGLED. THIS FIELD IS NOT USED IN THE CURRENT VERSION OF THE API"
        },
        "Data": {
          "type": "string",
          "description": "Face image in Base64 format"
        }
      }
    },

	"PersonInformation": {
      "type": "object",
      "properties": {
        "PersonID": {
          "type": "string",
          "description": "Unique ID of the person"
        },
		"Name": {
          "type": "string",
          "description": "Name of the person"
        },
		"IDDocNumber": {
          "type": "string",
          "description": "Number of the identification document"
        },
        "CustomField1": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
        "CustomField2": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
        "CustomField3": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
		"CustomField4": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
		"CustomField5": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
		"CustomField6": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
		"CustomField7": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
		"CustomField8": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
		"CustomField9": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        },
		"CustomField10": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the person"
        }
      }
    },
	
	"ServiceProvider": {
      "type": "object",
      "properties": {
        "Code": {
          "type": "string",
          "description": "Unique identifier"
        },
		"Name": {
          "type": "string",
          "description": "Name of the service provider"
        },
		"OperatorCode": {
          "type": "string",
          "description": "Unique identifier of the operator that is using the application to make the request"
        },
		"OperatorName": {
          "type": "string",
          "description": "Name of the operator that is using the application to make the request"
        },
        "CustomField1": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
        "CustomField2": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
        "CustomField3": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
		"CustomField4": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
		"CustomField5": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
		"CustomField6": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
		"CustomField7": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
		"CustomField8": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
		"CustomField9": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        },
		"CustomField10": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the service provider"
        }
      }
    },
	
	
	"Transaction": {
      "type": "object",
      "properties": {
        "TransactionID": {
          "type": "string",
          "description": "Unique ID of the transaction. This field is generated ty SimpleID and will be ignored for requests."
        },
		"ExternalCode": {
          "type": "string",
          "description": "Identified of the request defined by the application"
        },
		"ServiceCode": {
          "type": "string",
          "description": "Identifier of the service that is being provided by the application"
        },
        "CustomField1": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
        "CustomField2": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
        "CustomField3": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
		"CustomField4": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
		"CustomField5": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
		"CustomField6": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
		"CustomField7": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
		"CustomField8": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
		"CustomField9": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        },
		"CustomField10": {
          "type": "string",
          "description": "Any custom information that the application wants to store for the transaction"
        }
      }
    },
	
	
	 "SimpleIDAPIRegisterResponse": {
      "type": "object",
      "properties": {
        "ReturnCode": {
          "type": "integer",
          "description": "Return code"
        },
        "Message": {
          "type": "string",
          "description": "Message describing the return code"
        },
		"AccountCode": {
          "type": "string",
          "description": "The account used to perform the operation"
        },
		"TransactionID": {
          "type": "string",
          "description": "Unique identifier of the request"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique identifier of the registered person"
        },
		"SearchResults": {
		 "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        }
      }
    },
	
	 "SimpleIDAPISearchResponse": {
      "type": "object",
      "properties": {
        "ReturnCode": {
          "type": "integer",
          "description": "Return code"
        },
        "Message": {
          "type": "string",
          "description": "Message describing the return code"
        },
		"AccountCode": {
          "type": "string",
          "description": "The account used to perform the operation"
        },
		"TransactionID": {
          "type": "string",
          "description": "Unique identifier of the request"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique identifier of the person sent during the request. This is not the result of the search, it is just the PersonID information used in case of a 1:1 operation"
        },
		"SearchResults": {
		 "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        }
      }
    },
	
    "SimpleIDAPIDeleteResponse": {
      "type": "object",
      "properties": {
        "ReturnCode": {
          "type": "integer",
          "description": "Return code"
        },
        "Message": {
          "type": "string",
          "description": "Message describing the return code"
        },
		"AccountCode": {
          "type": "string",
          "description": "The account used to perform the operation"
        },
		"TransactionID": {
          "type": "string",
          "description": "Unique identifier of the request"
        },
        "PersonID": {
          "type": "string",
          "description": "Unique identifier of the person that was deleted"
        },
      }
    },
	
	
	
	"SimpleIDAPIGetPersonResponse": {
      "type": "object",
      "properties": {
        "ReturnCode": {
          "type": "integer",
          "description": "Return code"
        },
        "Message": {
          "type": "string",
          "description": "Message describing the return code"
        },
		"AccountCode": {
          "type": "string",
          "description": "The account used to perform the operation"
        },
		"Person": {
		 "$ref": "#/definitions/PersonResponse"
        }
      }
    },
	
	 "SimpleIDAPICheckIDResponse": {
      "type": "object",
      "properties": {
        "ReturnCode": {
          "type": "integer",
          "description": "Return code"
        },
        "Message": {
          "type": "string",
          "description": "Message describing the return code"
        },
		"AccountCode": {
          "type": "string",
          "description": "The account used to perform the operation"
        },
      }
    },
	
	"PersonResponse": {
      "type": "object",
      "properties": {
	   "PersonInformation": {
	     "$ref": "#/definitions/PersonInformation"
        },
		"Faces": {
		 "type": "array",
          "items": {
            "$ref": "#/definitions/FaceRequest"
          }
        }
      }
    },
	
	"SearchResult": {
      "type": "object",
      "properties": {
        "AutoHIT": {
          "type": "boolean",
          "description": "Indicates if this was an automatic HIT. "
        },
         "GrayAreaHIT": {
          "type": "boolean",
          "description": "Indicates if this hits needs human confirmation. "
        },
        "Person": {
         "$ref": "#/definitions/PersonInformation",
        },
      }
    }
  }
}
